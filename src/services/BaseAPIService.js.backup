/**
 * 기본 API 서비스 클래스
 * 모든 API 서비스의 부모 클래스로 공통 기능 제공
 */
class BaseAPIService {
  constructor(baseURL = '') {
    this.baseURL = baseURL;
    this.defaultHeaders = {
      'Content-Type': 'application/json',
    };
  }

  /**
   * HTTP 요청을 수행하는 기본 메서드
   * @param {string} url - 요청 URL
   * @param {Object} options - fetch 옵션
   * @returns {Promise<Object>} - API 응답
   */
  async request(url, options = {}) {
    const config = {
      headers: { ...this.defaultHeaders, ...options.headers },
      ...options,
    };

    try {
      const response = await fetch(`${this.baseURL}${url}`, config);
      return await this.handleResponse(response);
    } catch (error) {
      throw this.handleError(error);
    }
  }

  /**
   * GET 요청
   * @param {string} url - 요청 URL
   * @param {Object} params - 쿼리 파라미터
   * @returns {Promise<Object>} - API 응답
   */
  async get(url, params = {}) {
    const queryString = new URLSearchParams(params).toString();
    const fullUrl = queryString ? `${url}?${queryString}` : url;
    
    return this.request(fullUrl, { method: 'GET' });
  }

  /**
   * POST 요청
   * @param {string} url - 요청 URL
   * @param {Object} data - 요청 데이터
   * @returns {Promise<Object>} - API 응답
   */
  async post(url, data = {}) {
    return this.request(url, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  /**
   * 응답 처리
   * @param {Response} response - fetch 응답 객체
   * @returns {Promise<Object>} - 파싱된 응답 데이터
   */
  async handleResponse(response) {
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new APIError(
        errorData.message || `HTTP ${response.status}: ${response.statusText}`,
        response.status,
        errorData
      );
    }

    const contentType = response.headers.get('content-type');
    if (contentType && contentType.includes('application/json')) {
      return await response.json();
    }
    
    return await response.text();
  }

  /**
   * 에러 처리
   * @param {Error} error - 에러 객체
   * @returns {APIError} - 처리된 에러 객체
   */
  handleError(error) {
    if (error instanceof APIError) {
      return error;
    }
    
    return new APIError(
      error.message || '네트워크 오류가 발생했습니다.',
      0,
      error
    );
  }

  /**
   * 헤더 설정
   * @param {Object} headers - 추가할 헤더
   */
  setHeaders(headers) {
    this.defaultHeaders = { ...this.defaultHeaders, ...headers };
  }

  /**
   * 베이스 URL 설정
   * @param {string} baseURL - 새로운 베이스 URL
   */
  setBaseURL(baseURL) {
    this.baseURL = baseURL;
  }
}

/**
 * API 에러 클래스
 */
class APIError extends Error {
  constructor(message, status = 0, data = null) {
    super(message);
    this.name = 'APIError';
    this.status = status;
    this.data = data;
  }

  /**
   * 에러가 특정 상태 코드인지 확인
   * @param {number} status - 확인할 상태 코드
   * @returns {boolean}
   */
  isStatus(status) {
    return this.status === status;
  }

  /**
   * 네트워크 에러인지 확인
   * @returns {boolean}
   */
  isNetworkError() {
    return this.status === 0;
  }

  /**
   * 클라이언트 에러인지 확인 (4xx)
   * @returns {boolean}
   */
  isClientError() {
    return this.status >= 400 && this.status < 500;
  }

  /**
   * 서버 에러인지 확인 (5xx)
   * @returns {boolean}
   */
  isServerError() {
    return this.status >= 500;
  }
}

export { BaseAPIService, APIError };